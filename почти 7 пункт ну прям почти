#include "gd32f30x.h"
#include "gd32f30x_exti.h"
#include "gd32f30x_usart.h"
#include <stdio.h>
#include "gd32f30x_gpio.h"
#include <string.h>
#include <locale.h>
#include <cstdint>
#include <stdlib.h>

#define TIMER TIMER2
#define LED_PIN  GPIO_PIN_5   
#define LED_PORT GPIOA        
#define BOT_PIN GPIO_PIN_13
#define BOT_PORT GPIOC



void timer_delay_init(void)
{
    rcu_periph_clock_enable(RCU_TIMER2);

    /* Настройка параметров таймера */
    timer_deinit(TIMER);
    timer_parameter_struct timer_initpara;
    timer_initpara.prescaler         = (SystemCoreClock / 1000000) - 1;
    timer_initpara.alignedmode       = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
    timer_initpara.period            = 0xFFFFFFFF;
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
    timer_initpara.repetitioncounter = 0;
    timer_init(TIMER, &timer_initpara);


   
    /* Запускаем таймер */
    timer_enable(TIMER);
}

void timer_delay_us(uint32_t us)
{
    uint32_t start = TIMER_CNT(TIMER);
    while ((TIMER_CNT(TIMER) - start) < us);
}

void timer_delay_ms(uint32_t ms)
{
    while (ms--) {
        timer_delay_us(1000);
    }
}

void gpio_config(void)
 {
     rcu_periph_clock_enable(RCU_GPIOA);
     gpio_init(LED_PORT, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, LED_PIN);
     
     rcu_periph_clock_enable(RCU_GPIOC);
     gpio_init(GPIOC, GPIO_MODE_IPU, GPIO_OSPEED_50MHZ, GPIO_PIN_13);
 }

void exti_config(void)
{
    rcu_periph_clock_enable(RCU_AF); 

    
    gpio_exti_source_select(GPIO_PORT_SOURCE_GPIOC, GPIO_PIN_SOURCE_13);
    exti_init(EXTI_13, EXTI_INTERRUPT, EXTI_TRIG_FALLING); // Прерывание по спаду (кнопка нажата)
    exti_interrupt_flag_clear(EXTI_13); // Очищаем флаг прерывания

    // Настраиваем NVIC (включаем прерывание EXTI15_10)
    nvic_irq_enable(EXTI10_15_IRQn, 0, 0); // Приоритет 2, подприоритет 0
}

class knopka{
private:
typedef enum 
{
    BUTTON_IDLE,
    BUTTON_DEBOUNCE,
    BUTTON_PRESSED
} 
ButtonState;
ButtonState btn_state = BUTTON_IDLE;
volatile static bool button_pressed;

public:
static void IRQHandler() {
        if (exti_interrupt_flag_get(EXTI_13) != RESET) {
            button_pressed = true; 
            exti_interrupt_flag_clear(EXTI_13);
        }
    }
uint8_t button_dispatcher()
{
    bool current_state = gpio_input_bit_get(BOT_PORT, BOT_PIN);
    uint8_t event;
    static bool prev_state = 1;
    static uint32_t debounce_timer = 0;


    switch(btn_state) {
        case BUTTON_IDLE:
            if (current_state != prev_state) {
                //event = 0;
                btn_state = BUTTON_DEBOUNCE;
                
                debounce_timer = 150;
                event = 0;
            }
            break;

        case BUTTON_DEBOUNCE:
            if (--debounce_timer == 0) {
                if (current_state == 0) {
                    //event = 1;
                    btn_state = BUTTON_PRESSED;
                    debounce_timer = 150;
                    event = 1;

                    // Кнопка нажата
                    
                } else {
                    btn_state = BUTTON_IDLE;
                }
                //prev_state = current_state;
            }
            break;

        case BUTTON_PRESSED:
            if (current_state == 1) { 
                //event = 3;
                btn_state = BUTTON_DEBOUNCE;
                
                debounce_timer = 150;
                event = 2;
                //delay_1ms(150);
            }
            break;
    }
    prev_state = current_state;
    //event = current_state;
    return event;
    
}
};







volatile bool knopka::button_pressed = false;
extern "C" void EXTI10_15_IRQHandler(void) {
    knopka::IRQHandler();
}








uint32_t get_current_time_ms() {
    return TIMER_CNT(TIMER) / 1000;  // Конвертируем микросекунды в миллисекунды
}


extern "C" int main(void){
    
    
    gpio_config();
    timer_delay_init();
    exti_config();
    setlocale(LC_ALL, "RUS");
    // Включение тактирования портов и USART1
    rcu_periph_clock_enable(RCU_GPIOA);
    rcu_periph_clock_enable(RCU_USART1);

    // Настройка GPIO: PA2 (TX) - альт. функция push-pull, PA3 (RX) - вход
    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_2);
    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_3);

    // Настройка USART1
    usart_deinit(USART1);
    usart_baudrate_set(USART1, 115200);
    usart_word_length_set(USART1, USART_WL_8BIT);
    usart_stop_bit_set(USART1, USART_STB_1BIT);
    usart_parity_config(USART1, USART_PM_NONE);
    usart_transmit_config(USART1, USART_TRANSMIT_ENABLE);
    usart_receive_config(USART1, USART_RECEIVE_ENABLE);
    usart_enable(USART1);

    nvic_irq_enable(USART1_IRQn, 0, 0);
    usart_interrupt_enable(USART1, USART_INT_RBNE);

    knopka obj;
    //obj.button_dispatcher();
    
    const char* msg = nullptr;

    static uint32_t blink_interval_ms = 0;  // Интервал в мс (0 - выключено)
    static uint32_t last_blink_time = 0;
    static uint8_t led_blink_state = 0;
    static uint8_t blink_mode = 0;
    
    while (1) {
    static uint32_t count = 0;
    static uint8_t prev_event = 0;  
    uint8_t event = obj.button_dispatcher();

    uint32_t current_time = get_current_time_ms();


    switch (event) {
        case 2: // Кнопка нажата
            if (prev_event != 2) {  
                const char* msg = "button pushed\r\n";
                for (const char* p = msg; *p; ++p) {
                    usart_data_transmit(USART1, *p);
                    while (usart_flag_get(USART1, USART_FLAG_TBE) == RESET);
                }
                //gpio_bit_write(LED_PORT, LED_PIN, SET);
                prev_event = 2;  

                
               blink_mode = (blink_mode + 1) % 3;
                
                switch(blink_mode) {
                    case 1:  // Первый режим - 1 Гц
                        blink_interval_ms = 500;  // 500 мс = 1 Гц
                        last_blink_time = current_time;
                        led_blink_state = 1;
                        gpio_bit_write(LED_PORT, LED_PIN, SET);
                        break;
                        
                    case 2:  // Второй режим - 2 Гц
                        blink_interval_ms = 250;  // 250 мс = 2 Гц
                        last_blink_time = current_time;
                        led_blink_state = 1;
                        gpio_bit_write(LED_PORT, LED_PIN, SET);
                        break;
                        
                    case 0:  // Выключение
                        blink_interval_ms = 0;
                        gpio_bit_write(LED_PORT, LED_PIN, RESET);
                        break;
                }
            }
            break;

        case 1: // Кнопка отпущена
            if (prev_event != 1) { 
                const char* msg = "button released\r\n";
                for (const char* p = msg; *p; ++p) {
                    usart_data_transmit(USART1, *p);
                    while (usart_flag_get(USART1, USART_FLAG_TBE) == RESET);
                }
                //gpio_bit_write(LED_PORT, LED_PIN, RESET);
                prev_event = 1;  
            }
            break;

        default:
            event = 0;
            break;
    }
    
    //char debug_msg[50];
    //snprintf(debug_msg, sizeof(debug_msg), "count: %d\r\n", count);
    //for(const char* p = debug_msg; *p; ++p) {
    //        usart_data_transmit(USART1, *p);
    //        while(usart_flag_get(USART1, USART_FLAG_TBE) == RESET);
    //}
      if (blink_mode > 0) {
        uint32_t elapsed = current_time - last_blink_time;
        
        if (elapsed >= blink_interval_ms) {
            last_blink_time = current_time;
            led_blink_state = !led_blink_state;
            gpio_bit_write(LED_PORT, LED_PIN, led_blink_state ? SET : RESET);
        }
    }
    
}
}









